from gmpy2 import *
from Crypto.Util.number import *

# Given values
N2 = 15100254697650550107773880032815145863356657719287915742500114525591753087962467826081728465512892164117836132237310655696249972190691781679185814089899954980129273157108546566607320409558512492474972517904901612694329245705071789171594962844907667870548108438624866788136327638175865250706483350097727472981522495023856155253124778291684107340441685908190131143526592231859940556416271923298043631447630144435617140894108480182678930181019645093766210388896642127572162172851596331016756329494450522133805279328640942549500999876562756779916153474958590607156569686953857510763692124165713467629066731049974996526071
e = 65537
c = 4814924495615599863001719377787452659409530421473568305028025012566126400664362465878829645297418472853978736123334486954531551369698267539790007454131291197238666548347098462574649698959650399163371262093116196849478966536838813625531493756454672767925688817717023571267320336512019086040845336203876733170680765788230657626290346741730982737645243576591521512217549028162039336681342312618225110504010746912604698079363106352791499951364510694837846064947033912634697178711135807010770985698854383359436879061864935030256963597840531276583023488437671584864430423908673190679945703404235633491522955548722332086120

# Factorize N2
p2, q2 = iroot(N2, 2), 0
while True:
    p2 += 1
    if N2 % p2 == 0:
        q2 = N2 // p2
        break

# Compute phi(N2) and private exponent d
phi_N2 = (p2 - 1) * (q2 - 1)
d = invert(e, phi_N2)

# Decrypt the ciphertext
m = pow(c, d, N2)

# Convert the decrypted plaintext to bytes and print
plaintext = long_to_bytes(m)
print(plaintext.decode())
