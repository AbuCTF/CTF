import gmpy2

# Define p and q with the provided values
p = 11492900508587989954531440332263108922084741581974222102472118047768380430540353920289746766137088552446667728704705825767564907436992191013818658710263387461050109924538094327413211095570408951831804511312664061115780934181616871945218328272318074413219648490794574757471025686956697500105383560452507555043577475707379430674941097523563439495291391376433292863780301364692520578080638180885760050174506019604723296382744280564071968270446660250234587067991312783613649361373626181634408704506324790573495089018767820926445333763821104985493381745364201010694528200379210559415841578043670235152463040761395093466757
q = 11492900508587989954531440332263108922084741581974222102472118047768380430540353920289746766137088552446667728704705825767564907436992191013818658710263387461050109924538094327413211095570408951831804511312664061115780934181616871945218328272318074413219648490794574757471025686956697500105383560452507555043583332241787496934511124508164581479242699938954664986778778089174462752116916848703843649899098070668669678312274875686923774909987821333120312320645501581685293243247702323898532381890355435523179413889042894904990054113266062322984191234608909924029167449813744492456171898301189923726970620918920525920821

# Calculate N
N = p * q

# Public exponent
e = 65537

# Function to calculate modular multiplicative inverse
def mod_inv(a, m):
    return int(gmpy2.invert(a, m))

# Calculate private exponent d
phi = (p - 1) * (q - 1)
d = mod_inv(e, phi)

# Given encrypted flag
encrypted_flag = b"\x0bk\xae\xfe3\xf6V\xbep\x8cz?M\x00\x12\x1d\xf44yp\xef\xe0\x1ai\xea\xa5~\xd7\xc0{) \xe1<\xc4\x15\r\x83\xb6wJ\xda\x1bow`\x8c<(\xc4\x86\xc0\x80\xdc=G;k;\xd7\xb4TA\x1f77\xcb\x87qx\xda|\x1e\x81\x958:-\x93\xcd\xcdQ\xd2D\xfc\r\x8b\x00\xd1\xb4dbIv\xe0\xfc\xf9\xfb\xfd;\x98\xcc\xa8v\x1e\xc7V\xd6\x9d\x0fZC\x1e\x02\xb0\x94\xc5\x80\x86\xf7b\x9c#I\x909\xd6\x15\x10\xee\xae$\xd0U\xc5\x8dN\x9e\x07\x82\xc1\x98P\xce\xe6<lT\xa4\xf1m\xd7\xe5\xa6\xb8\xa7>\xb7\x96\x0f-\x03l\xeb\xfa\x83Q\xa9\x8f\xc9u|6W_u\x92S3RO\xde\xad\xc9rb\x1b7\xd6\xbd\x0e~\x86*\xa2\x12w\xcc\x9c1 @\xe6\x1e\xfae5|\xc9\x8f\x0f\xa7'\x9f\xf5.\xc5\xa1\xda\xeb\xc3\t\xf2gbSKd\x9b\xf2f\x8b\x83\xb5\x9d\xeb\x8eC\xebPM\xa7E\xd8g[\x06\xa3x}A\x87u\xfe\xaf)\x8eG\xe7\xd3\xee\x8a\x08$S\x9e\xb5\xbdL\x0c\r\xac#\xe9V\xd5\xcf\xf4\xce\xaaL\xfe*\x10\xb8\xf1i\xf5\x89\xb6\x884\x16pz\xe7Dz\xd1\x1aD\xe7\xf6%\xe7\xe2\xd6\xda\xc6\xafj\x10\x92\xd17\x7f\xb1\xe0\xa2A\xb4\xec9\xb4>\xab5\xba\x02\xa1n\xbc1\x84%\n\xcc(\xf3\xaa2S\x99\x94;\x9c\xad\x11K5\xcc\xec1\x83v>L\x98+\xfe;\x15\xd7\xc62_\xc6\x86\xa3\x03\xebk\xe6k&\xb1~]\x91,\xaf0\xc8\xd0\xde\xce.\x0eV\xea\xa8IB\x8e\x9e\xdaL\xaf\xac'(q\xfc\xab1\x88#U\xf97\xa8\xf9\x07A\xe6\x0fD\xbf%\xa41\xb08S\xbb\xa5\xb1R\xb9\xb3\xe5\xe6\xb5\xc5@\xd02\x13\xc9\x94k\xd5\x85\x93\x0b\xca\x00fn\xd8\x1e\xce:\x9aI\x80\x1eY\x12\xd7\xc2\x87D6\xb3\x12\x07\xa5\x88\xc2\x12\xda\xf4\x99j\x01\x92\x9b\xb7\t\x822\xc3\xbc\xe0#\xd0\x83[\xe6X\x06\n\x91q\xfb\xb2\x99Ago\xfe\x8e\x1c\x8e\x94\xf5}WV=\xb3"

# Decrypt the flag
decrypted_flag = decrypt(encrypted_flag, d, N)

print("Decrypted flag:", decrypted_flag.decode())
